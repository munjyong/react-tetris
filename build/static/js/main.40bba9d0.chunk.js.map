{"version":3,"sources":["img/bg.png","tetrominos.js","gameHelpers.js","hooks/usePlayer.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplayMenu.js","components/Display.js","components/StartButton.js","components/styles/StyledTetris.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","length","createStage","Array","from","fill","checkCollision","player","stage","_ref","moveX","x","moveY","y","tetromino","pos","usePlayer","_useState","useState","collided","_useState2","Object","slicedToArray","setPlayer","rotate","matrix","dir","mtrx","map","_","index","column","row","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","_objectSpread","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","_useState3","_useState4","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","cell","forEach","value","concat","reduce","ack","findIndex","unshift","push","sweepRows","StyledStage","styled","div","_templateObject","props","height","width","StyledCell","StyledCell_templateObject","type","React","memo","react_default","a","createElement","console","log","Stage","components_Cell","key","StyledDisplay","StyledDisplayMenu_templateObject","gameOver","Display","text","StyledStartButton","button","StartButton_templateObject","StartButton","callback","onClick","StyledTetrisWrapper","StyledTetris_templateObject","bgImage","StyledTetris","_templateObject2","Tetris","dropTime","setDropTime","setGameOver","_usePlayer","_usePlayer2","updatePlayerPos","playerRotate","_useStage","_useStage2","_useGameStatus","score","setScore","rows","setRows","_useState5","_useState6","level","setLevel","linePoints","calcScore","useGameStatus","_useGameStatus2","movePlayer","drop","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","_ref2","keyCode","role","tabIndex","onKeyDown","e","onKeyUp","components_Stage","components_Display","components_StartButton","App","className","components_Tetris","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.40bba9d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.502d5d44.png\";","export const TETROMINOS = {\n    // Empty shape\n    0: { shape: [[0]], color: '0, 0, 0' },\n    // Use 2D array to store the shape structure and color of each tetromino\n    I: {\n        shape: [\n            [0, 'I', 0, 0], \n            [0, 'I', 0, 0], \n            [0, 'I', 0, 0], \n            [0, 'I', 0, 0]\n        ],\n        color: '216, 51, 126',\n    },\n    J: { \n        shape: [\n            [0, 'J', 0], \n            [0, 'J', 0], \n            ['J', 'J', 0]\n        ], \n        color: '195, 237, 78' \n    },\n    L: {\n        shape: [\n            [0, 'L', 0], \n            [0, 'L', 0], \n            [0, 'L', 'L']\n        ],\n        color: '56, 18, 180',\n    },\n    O: { \n        shape: [\n            ['O', 'O'], \n            ['O', 'O']\n        ], \n        color: '3, 105, 181' \n    },\n    S: { \n        shape: [\n            [0, 'S', 'S'], \n            ['S', 'S', 0], \n            [0, 0, 0]\n        ], \n        color: '247, 235, 15' \n    },\n    T: {\n        shape: [\n            [0, 0, 0], \n            ['T', 'T', 'T'], \n            [0, 'T', 0]\n        ],\n        color: '36, 252, 188',\n    },\n    Z: { \n        shape: [\n            ['Z', 'Z', 0], \n            [0, 'Z', 'Z'], \n            [0, 0, 0]\n        ], \n        color: '215, 34, 202' \n    }\n  };\n  \n  export const randomTetromino = () => {\n    const tetrominos = 'IJLOSTZ';\n    const randTetromino =\n      tetrominos[Math.floor(Math.random() * tetrominos.length)];\n    return TETROMINOS[randTetromino];\n  };\n","export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () => Array(STAGE_WIDTH).fill([0, 'clear']));\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n  // THIS IS SLOWER!!!\n  // return player.tetromino.some((row, y) =>\n  //   row.some((cell, x) => {\n  //     if (cell !== 0) {\n  //       return (\n  //         !stage[y + player.pos.y + moveY] ||\n  //         !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n  //         stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n  //           'clear'\n  //       );\n  //     }\n  //     return false;\n  //   })\n  // );\n\n  // Using for loops to be able to return (and break). Not possible with forEach\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // 1. Check that we're on an actual Tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if (\n          // 2. Check that our move is inside the game areas height (y)\n          // That we're not go through bottom of the play area\n          !stage[y + player.pos.y + moveY] ||\n          // 3. Check that our move is inside the game areas width (x)\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n          // 4. Check that the cell wer'e moving to isn't set to clear\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n            'clear'\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n  // 5. If everything above is false\n  return false;\n};\n","import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  function rotate(matrix, dir) {\n    // Make the rows to become cols (transpose)\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\n    // Reverse each row to get a rotaded matrix\n    if (dir > 0) return mtrx.map(row => row.reverse());\n    return mtrx.reverse();\n  }\n\n  function playerRotate(stage, dir) {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n    setPlayer(clonedPlayer);\n  }\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage =>\n      newStage.reduce((ack, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev + 1);\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          return ack;\n        }\n        ack.push(row);\n        return ack;\n      }, []);\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n      // Then check if we got some score if collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // Here are the updates\n    setStage(prev => updateStage(prev));\n  }, [\n    player.collided,\n    player.pos.x,\n    player.pos.y,\n    player.tetromino,\n    resetPlayer,\n  ]);\n\n  return [stage, setStage, rowsCleared];\n};\n","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n  display: grid;\n\n  /* Keeps the cells in the stage perfectly square if the screen size is rearranged */\n  grid-template-rows: repeat(\n    ${props => props.height},\n    calc(25vw / ${props => props.width})\n  );\n  grid-template-columns: repeat(${props => props.width}, 1fr);\n\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  max-width: 25vw;\n  background: #111;\n`;\n","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n  width: auto;\n  background: rgba(${props => props.color}, 0.8);\n  /* Check if the tetromino is an empty one or an active one */\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n  /* Shadow Effect */\n  border-bottom-color: rgba(${props => props.color}, 0.1);\n  border-right-color: rgba(${props => props.color}, 1);\n  border-top-color: rgba(${props => props.color}, 1);\n  border-left-color: rgba(${props => props.color}, 0.3);\n`;\n","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\nimport { TETROMINOS } from '../tetrominos';\n\n\nconst Cell = ({ type }) => (\n  <StyledCell type={type} color={TETROMINOS[type].color}>\n    {console.log('rerender cell')}\n  </StyledCell>\n);\n\n// React.memo makes sure we only re-render the changed cells\nexport default React.memo(Cell);\n","import React from 'react';\nimport { StyledStage } from './styles/StyledStage';\n\nimport Cell from './Cell';\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n  </StyledStage>\n);\n\nexport default Stage;\n","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  color: ${props => (props.gameOver ? 'red' : '#999')};\n  background: #000;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n`;\n","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplayMenu';\n\nconst Display = ({ gameOver, text }) => (\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n);\n\nexport default Display;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledStartButton = styled.button`\n  box-sizing: border-box;\n\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: 4px solid #000;\n  color: white;\n  background: #222;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`;\n\nconst StartButton = ({ callback }) => (\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\n);\n\nexport default StartButton;\n","import styled from 'styled-components';\n// BG Image\nimport bgImage from '../../img/bg.png';\n\nexport const StyledTetrisWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(${bgImage}) #000;\n  background-size: cover;\n  overflow: hidden;\n`;\n\nexport const StyledTetris = styled.div`\n  display: flex;\n  align-items: flex-start;\n  padding: 5%;\n  margin: 0 auto;\n  max-width: 900px;\n  padding-left: 30%;\n  padding-right: 30%;\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    display: block;\n    padding: 0 20px;\n  }\n`;\n","import React, { useState } from 'react';\n\n// Hooks\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nimport { createStage, checkCollision } from '../gameHelpers';\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n    rowsCleared\n  );\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n      updatePlayerPos({ x: dir, y: 0 });\n    }\n  };\n\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      // Activate the interval again when user releases down arrow.\n      if (keyCode === 40) {\n        setDropTime(1000 / (level + 1));\n      }\n    }\n  };\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setScore(0);\n    setLevel(0);\n    setRows(0);\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    // Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1);\n      // Also increase speed\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      // Game over!\n      if (player.pos.y < 1) {\n        console.log('GAME OVER!!!');\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const dropPlayer = () => {\n    // We don't need to run the interval when we use the arrow down to\n    // move the tetromino downwards. So deactivate it for now.\n    setDropTime(null);\n    drop();\n  };\n\n  // This one starts the game\n  // Custom hook by Dan Abramov\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  return (\n    <StyledTetrisWrapper\n      role=\"button\"\n      tabIndex=\"0\"\n      onKeyDown={e => move(e)}\n      onKeyUp={keyUp}\n    >\n      <StyledTetris>\n        <Stage stage={stage} />\n        <aside>\n          {gameOver ? (\n            <Display gameOver={gameOver} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text={`Score: ${score}`} />\n              <Display text={`rows: ${rows}`} />\n              <Display text={`Level: ${level}`} />\n            </div>\n          )}\n          <StartButton callback={startGame} />\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n\n  const linePoints = [40, 100, 300, 1200];\n\n  const calcScore = useCallback(() => {\n    // We have score\n    if (rowsCleared > 0) {\n      // This is how original Tetris score is calculated\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n\n  return [score, setScore, rows, setRows, level, setLevel];\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}